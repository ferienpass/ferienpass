<?php

declare(strict_types=1);

/*
 * This file is part of the Ferienpass package.
 *
 * (c) Richard Henkenjohann <richard@ferienpass.online>
 *
 * For more information visit the project website <https://ferienpass.online>
 * or the documentation under <https://docs.ferienpass.online>.
 */

namespace Ferienpass\CoreBundle\Notification;

use Symfony\Component\ExpressionLanguage\ExpressionLanguage;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\Notifier\Notification\Notification;
use Symfony\Contracts\Service\Attribute\SubscribedService;
use Symfony\Contracts\Service\ServiceSubscriberInterface;
use Symfony\Contracts\Service\ServiceSubscriberTrait;

abstract class AbstractNotification extends Notification implements ServiceSubscriberInterface
{
    use ServiceSubscriberTrait;

    public function getSubject(): string
    {
        return parent::getSubject(); // TODO: Change the autogenerated stub
    }

    public function getContent(): string
    {
        return parent::getContent(); // TODO: Change the autogenerated stub
    }

    /**
     * The context is used to replace placeholders in texts and templates.
     */
    public function getContext(): array
    {
        return [
            'baseUrl' => $this->requestStack()->getCurrentRequest()?->getBaseUrl(),
        ];
    }

    private function parseTokens(string $text, array $context = []): string
    {
        $expressionLanguage = new ExpressionLanguage();

        return preg_replace_callback(
            '/{{([^{}]+)}}\n?/',
            fn (array $matches) => $expressionLanguage->evaluate($matches[1], $this->getContext()),
            $text,
        );
    }

    #[SubscribedService]
    private function requestStack(): RequestStack
    {
        return $this->container->get(__METHOD__);
    }
}
